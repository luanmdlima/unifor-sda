// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/06/2022 17:53:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controller_vlg_sample_tst(
	clock,
	counter,
	reset,
	sampler_tx
);
input  clock;
input [4:0] counter;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock or counter or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module controller_vlg_check_tst (
	green,
	red,
	reset_counter,
	yellow,
	sampler_rx
);
input [2:0] green;
input [2:0] red;
input  reset_counter;
input [2:0] yellow;
input sampler_rx;

reg [2:0] green_expected;
reg [2:0] red_expected;
reg  reset_counter_expected;
reg [2:0] yellow_expected;

reg [2:0] green_prev;
reg [2:0] red_prev;
reg  reset_counter_prev;
reg [2:0] yellow_prev;

reg [2:0] green_expected_prev;
reg [2:0] red_expected_prev;
reg  reset_counter_expected_prev;
reg [2:0] yellow_expected_prev;

reg [2:0] last_green_exp;
reg [2:0] last_red_exp;
reg  last_reset_counter_exp;
reg [2:0] last_yellow_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	green_prev = green;
	red_prev = red;
	reset_counter_prev = reset_counter;
	yellow_prev = yellow;
end

// update expected /o prevs

always @(trigger)
begin
	green_expected_prev = green_expected;
	red_expected_prev = red_expected;
	reset_counter_expected_prev = reset_counter_expected;
	yellow_expected_prev = yellow_expected;
end


// expected red[ 2 ]
initial
begin
	red_expected[2] = 1'bX;
end 
// expected red[ 1 ]
initial
begin
	red_expected[1] = 1'bX;
end 
// expected red[ 0 ]
initial
begin
	red_expected[0] = 1'bX;
end 
// expected yellow[ 2 ]
initial
begin
	yellow_expected[2] = 1'bX;
end 
// expected yellow[ 1 ]
initial
begin
	yellow_expected[1] = 1'bX;
end 
// expected yellow[ 0 ]
initial
begin
	yellow_expected[0] = 1'bX;
end 
// expected green[ 2 ]
initial
begin
	green_expected[2] = 1'bX;
end 
// expected green[ 1 ]
initial
begin
	green_expected[1] = 1'bX;
end 
// expected green[ 0 ]
initial
begin
	green_expected[0] = 1'bX;
end 

// expected reset_counter
initial
begin
	reset_counter_expected = 1'bX;
end 
// generate trigger
always @(green_expected or green or red_expected or red or reset_counter_expected or reset_counter or yellow_expected or yellow)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected green = %b | expected red = %b | expected reset_counter = %b | expected yellow = %b | ",green_expected_prev,red_expected_prev,reset_counter_expected_prev,yellow_expected_prev);
	$display("| real green = %b | real red = %b | real reset_counter = %b | real yellow = %b | ",green_prev,red_prev,reset_counter_prev,yellow_prev);
`endif
	if (
		( green_expected_prev[0] !== 1'bx ) && ( green_prev[0] !== green_expected_prev[0] )
		&& ((green_expected_prev[0] !== last_green_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_expected_prev);
		$display ("     Real value = %b", green_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_green_exp[0] = green_expected_prev[0];
	end
	if (
		( green_expected_prev[1] !== 1'bx ) && ( green_prev[1] !== green_expected_prev[1] )
		&& ((green_expected_prev[1] !== last_green_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_expected_prev);
		$display ("     Real value = %b", green_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_green_exp[1] = green_expected_prev[1];
	end
	if (
		( green_expected_prev[2] !== 1'bx ) && ( green_prev[2] !== green_expected_prev[2] )
		&& ((green_expected_prev[2] !== last_green_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_expected_prev);
		$display ("     Real value = %b", green_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_green_exp[2] = green_expected_prev[2];
	end
	if (
		( red_expected_prev[0] !== 1'bx ) && ( red_prev[0] !== red_expected_prev[0] )
		&& ((red_expected_prev[0] !== last_red_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_expected_prev);
		$display ("     Real value = %b", red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_red_exp[0] = red_expected_prev[0];
	end
	if (
		( red_expected_prev[1] !== 1'bx ) && ( red_prev[1] !== red_expected_prev[1] )
		&& ((red_expected_prev[1] !== last_red_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_expected_prev);
		$display ("     Real value = %b", red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_red_exp[1] = red_expected_prev[1];
	end
	if (
		( red_expected_prev[2] !== 1'bx ) && ( red_prev[2] !== red_expected_prev[2] )
		&& ((red_expected_prev[2] !== last_red_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_expected_prev);
		$display ("     Real value = %b", red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_red_exp[2] = red_expected_prev[2];
	end
	if (
		( reset_counter_expected_prev !== 1'bx ) && ( reset_counter_prev !== reset_counter_expected_prev )
		&& ((reset_counter_expected_prev !== last_reset_counter_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reset_counter :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reset_counter_expected_prev);
		$display ("     Real value = %b", reset_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_reset_counter_exp = reset_counter_expected_prev;
	end
	if (
		( yellow_expected_prev[0] !== 1'bx ) && ( yellow_prev[0] !== yellow_expected_prev[0] )
		&& ((yellow_expected_prev[0] !== last_yellow_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yellow[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yellow_expected_prev);
		$display ("     Real value = %b", yellow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_yellow_exp[0] = yellow_expected_prev[0];
	end
	if (
		( yellow_expected_prev[1] !== 1'bx ) && ( yellow_prev[1] !== yellow_expected_prev[1] )
		&& ((yellow_expected_prev[1] !== last_yellow_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yellow[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yellow_expected_prev);
		$display ("     Real value = %b", yellow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_yellow_exp[1] = yellow_expected_prev[1];
	end
	if (
		( yellow_expected_prev[2] !== 1'bx ) && ( yellow_prev[2] !== yellow_expected_prev[2] )
		&& ((yellow_expected_prev[2] !== last_yellow_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yellow[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yellow_expected_prev);
		$display ("     Real value = %b", yellow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_yellow_exp[2] = yellow_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [4:0] counter;
reg reset;
// wires                                               
wire [2:0] green;
wire [2:0] red;
wire reset_counter;
wire [2:0] yellow;

wire sampler;                             

// assign statements (if any)                          
controller i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.counter(counter),
	.green(green),
	.red(red),
	.reset(reset),
	.reset_counter(reset_counter),
	.yellow(yellow)
);

// reset
initial
begin
	reset = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 
// counter[ 4 ]
initial
begin
	counter[4] = 1'b0;
	counter[4] = #320000 1'b1;
	counter[4] = #320000 1'b0;
	counter[4] = #320000 1'b1;
end 
// counter[ 3 ]
initial
begin
	repeat(3)
	begin
		counter[3] = 1'b0;
		counter[3] = #160000 1'b1;
		# 160000;
	end
	counter[3] = 1'b0;
end 
// counter[ 2 ]
initial
begin
	repeat(6)
	begin
		counter[2] = 1'b0;
		counter[2] = #80000 1'b1;
		# 80000;
	end
	counter[2] = 1'b0;
end 
// counter[ 1 ]
initial
begin
	repeat(12)
	begin
		counter[1] = 1'b0;
		counter[1] = #40000 1'b1;
		# 40000;
	end
	counter[1] = 1'b0;
end 
// counter[ 0 ]
always
begin
	counter[0] = 1'b0;
	counter[0] = #20000 1'b1;
	#20000;
end 

controller_vlg_sample_tst tb_sample (
	.clock(clock),
	.counter(counter),
	.reset(reset),
	.sampler_tx(sampler)
);

controller_vlg_check_tst tb_out(
	.green(green),
	.red(red),
	.reset_counter(reset_counter),
	.yellow(yellow),
	.sampler_rx(sampler)
);
endmodule

